var logger = require('f5-logger').getInstance();
var http = require('http');
var GheFetch = require('./ghe_fetch.js');

// POST the device phone-home details to this worker
// Worker will then retrieve its "on-boarding" details from the repo and execute the Device Onboarding worker.

//TODO: on-barding minimum criteria
// https://github.com/f5devcentral/bigip-onboarding/blob/master/tasks/main.yml

function GheOnBoard() {}

GheOnBoard.prototype.WORKER_URI_PATH = "shared/n8/ghe_onboard";
GheOnBoard.prototype.isPublic = true;

var state = {};

var bigIpEndpoints = {
    "URI_SYSTEM_CONFIGURATION": "/mgmt/tm/sys/config",
    "URI_GLOBAL_SETTINGS":  "/mgmt/tm/sys/global-settings",
    "URI_DNS_SETTINGS":  "/mgmt/tm/sys/dns",
    "URI_NTP_SETTINGS": "/mgmt/tm/sys/ntp",
    "URI_SYSLOG_SETTINGS": "/mgmt/tm/sys/syslog",
    "URI_LICENSE_ACTIVATION": "/mgmt/tm/shared/licensing/activation",
    "URI_LICENSE_REGISTRATION": "/mgmt/tm/shared/licensing/registration",
    "URI_DEVICE_NAME": "/mgmt/tm/cm/device",
    "URI_SETUP_UTILITY_STATUS": "/mgmt/tm/sys/db/setup.run",
    "URI_SAVE_CONFIGURATION": "/mgmt/shared/save-config"
};

GheOnBoard.prototype.onStart = function(success, error) {

  logger.info("GitHub Enterprise WebHook Server: GheOnBoard.onStart()...");

  const GHE_IP_ADDR = process.env.GHE_IP_ADDR;
  const GHE_ACCESS_TOKEN = process.env.GHE_ACCESS_TOKEN;
  //TODO const BIG-IP_HOSTNAME = ...need to get the hostname to map to repo...

  if (GHE_IP_ADDR && GHE_ACCESS_TOKEN) {
    success();
  }
  else {
    error('GHE Webhook Server requires IP Address, and Access Token.');
  }

// this should actually check that the Device Reset/Onbaord worker is installed and loaded `/available` before 'success();'.
  success();
};

/**
 * handle onGet HTTP request
 */
GheOnBoard.prototype.onGet = function(restOperation) {

    restOperation.setBody(this.state);
    this.completeRestOperation(restOperation);
  
};

/**
 * handle onPost HTTP request
 */
GheOnBoard.prototype.onPost = function(restOperation) {

  //TODO this is where we accept: GHE IP Address, GHE Token, BIG-IP Hostname
  var newState = restOperation.getBody();
  var BHOSTNAME = newState.mgmt.hostname;
  logger.info('This is my new state: ' +JSON.stringify(newState));
//  logger.info("This is my GHE_IP: " +newState.ghe_ip);
//  logger.info("This is my GHE_TOKEN: " +newState.token);
  logger.info("This is my HOSTNAME: " +BHOSTNAME);

//  GheFetch.getServiceDefinition(GHE_IP_ADDR, GHE_ACCESS_TOKEN, modifiedFilePath);

/* THIS DOES NOT EXIST YET.
  GheFetch.getDeviceDefinition(BHOSTNAME, function () {

    //FIX: should this iterate the endpoints, or newState.state?
    bigIpEndpoints.map(endpoint => {
      this.deploy(hostname, endpoint, function() {

      });
    });
    

  });
*/

  this.state = newState;

};

GheOnBoard.prototype.deploy = function(error, success) {

  //TODO javascript POST  

};

GheOnBoard.prototype.getExampleState = function () {
  return {
    "mgmt": {
      "ip":"[ip_address]",
      "ntp":"[ip_address]",
      "dns":[
        "[ip_address]"
      ],
      "hostname":"[hostname]",
      "gw":"[ip_address]",
    },
    "dataplane": {
      "gateway":"[ip_address]",
      "1.1":{
        "vlan":"",
        "ip":"[ip_address]",
        "netmask":"[netmask]"
      },
      "1.2":{
        "vlan":"[vlan_id]",
        "ip":"[ip_address]",
        "netmask":"[netmask]"
      }
    }
  };
};

module.exports = GheOnBoard;
